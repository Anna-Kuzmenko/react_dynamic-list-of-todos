{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","types/FilterBy.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","visibleTodos","selectedTodoId","onSelectTodo","className","map","id","title","completed","userId","classNames","type","onClick","TodoFilter","status","query","handleSetStatus","handleSetQuery","handleReset","value","onChange","event","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterBy","Loader","TodoModal","todo","onClose","useState","user","setUser","loadUsers","a","usersFromServer","Error","useEffect","href","email","name","App","todos","setTodos","selectedTodo","setSelectedTodo","selectedStatus","setSelectedStatus","setQuery","loadTodos","useCallback","todosFromServer","handleSelectingTodo","string","preparedTodos","useMemo","filter","ALL","COMPLETED","ACTIVE","lowerCaseQuery","toLowerCase","trim","includes","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ad4679c6.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  visibleTodos: Todo[];\n  selectedTodoId?: number;\n  onSelectTodo: (todo: Todo) => void;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  visibleTodos,\n  selectedTodoId,\n  onSelectTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {visibleTodos.map(({\n        id,\n        title,\n        completed,\n        userId,\n      }) => (\n        <tr\n          key={id}\n          data-cy=\"todo\"\n          className={classNames({\n            'has-background-info-light': id === selectedTodoId,\n          })}\n        >\n          <td className=\"is-vcentered\">{id}</td>\n          <td className=\"is-vcentered\">\n            {completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n\n          <td className=\"is-vcentered is-expanded\">\n            <p className={classNames({\n              'has-text-success': completed,\n              'has-text-danger': !completed,\n            })}\n            >\n              {title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => {\n                onSelectTodo({\n                  id,\n                  title,\n                  completed,\n                  userId,\n                });\n              }}\n            >\n              <span className=\"icon\">\n                {selectedTodoId === id\n                  ? <i className=\"far fa-eye-slash\" />\n                  : <i className=\"far fa-eye\" />}\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import React from 'react';\n\ninterface Props {\n  status: string;\n  query: string;\n  handleSetStatus: (selectedStatus: string) => void;\n  handleSetQuery: (query: string) => void;\n  handleReset: () => void;\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  status, query, handleSetStatus, handleSetQuery, handleReset,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={status}\n          onChange={(event) => handleSetStatus(event.target.value)}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => handleSetQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n        {query && (\n          /* eslint-disable-next-line jsx-a11y/control-has-associated-label */\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={handleReset}\n          />\n        )}\n\n      </span>\n    </p>\n  </form>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum FilterBy {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ninterface Props {\n  todo: Todo;\n  onClose: () => void;\n}\n\nexport const TodoModal: React.FC<Props> = ({ todo, onClose }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const loadUsers = async () => {\n    try {\n      const usersFromServer = await getUser(todo.userId);\n\n      setUser(usersFromServer);\n    } catch (console) {\n      throw new Error();\n    }\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo# ${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user?.name || 'Unknown user'}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, {\n  useCallback, useEffect, useMemo, useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { FilterBy } from './types/FilterBy';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [selectedStatus, setSelectedStatus] = useState('all');\n  const [query, setQuery] = useState('');\n\n  const loadTodos = useCallback(async () => {\n    try {\n      const todosFromServer = await getTodos();\n\n      setTodos(todosFromServer);\n    } catch (error) {\n      throw new Error();\n    }\n  }, []);\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  const handleSelectingTodo = useCallback((todo: Todo) => {\n    setSelectedTodo(todo);\n  }, []);\n\n  const handleSetQuery = useCallback((string: string) => {\n    setQuery(string);\n  }, []);\n\n  const handleCloseModal = () => setSelectedTodo(null);\n\n  const handleReset = () => {\n    setQuery('');\n  };\n\n  const preparedTodos = useMemo(() => {\n    let visibleTodos: Todo[] = [...todos];\n\n    visibleTodos = visibleTodos.filter(todo => {\n      switch (selectedStatus) {\n        case FilterBy.ALL:\n          return true;\n\n        case FilterBy.COMPLETED:\n          return todo.completed;\n\n        case FilterBy.ACTIVE:\n          return !todo.completed;\n\n        default:\n          return true;\n      }\n    });\n\n    if (query) {\n      const lowerCaseQuery = query.toLowerCase().trim();\n\n      visibleTodos = visibleTodos.filter(\n        ({ title }) => title.toLowerCase().includes(lowerCaseQuery),\n      );\n    }\n\n    return visibleTodos;\n  }, [selectedStatus, query, todos]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                status={selectedStatus}\n                handleSetStatus={setSelectedStatus}\n                query={query}\n                handleSetQuery={handleSetQuery}\n                handleReset={handleReset}\n              />\n            </div>\n\n            <div className=\"block\">\n              {preparedTodos.length\n                ? (\n                  <TodoList\n                    visibleTodos={preparedTodos}\n                    selectedTodoId={selectedTodo?.id}\n                    onSelectTodo={handleSelectingTodo}\n                  />\n                )\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onClose={handleCloseModal}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}